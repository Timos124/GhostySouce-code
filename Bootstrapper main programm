using System;
using System.Diagnostics;
using System.IO;
using System.Net;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;

#nullable enable
namespace GhostyFullApp
{
  internal class Program
  {
    private const string GHOSTY_FOLDER = "C:\\Ghosty";
    private const string GITHUB_URL = "https://raw.githubusercontent.com/DizcatOff/GhostyLite/refs/heads/main/external";

    [DllImport("kernel32.dll", SetLastError = true)]
    private static extern IntPtr GetStdHandle(int nStdHandle);

    [DllImport("kernel32.dll")]
    private static extern bool GetConsoleMode(IntPtr hConsoleHandle, out int lpMode);

    [DllImport("kernel32.dll")]
    private static extern bool SetConsoleMode(IntPtr hConsoleHandle, int dwMode);

    private static void EnableVirtualTerminalProcessing()
    {
      IntPtr stdHandle = Program.GetStdHandle(-11);
      int lpMode;
      if (!Program.GetConsoleMode(stdHandle, out lpMode))
        return;
      Program.SetConsoleMode(stdHandle, lpMode | 4);
    }

    private static void Main()
    {
      Program.SetupConsole();
      Program.EnsureGhostyFolderExists();
      Program.DownloadExecutables();
      Program.PromptAndRunExecutables();
    }

    private static void SetupConsole()
    {
      Program.EnableVirtualTerminalProcessing();
      Console.OutputEncoding = Encoding.UTF8;
      Console.Title = "Ghosty - Downloader";
      Console.Clear();
      Console.ForegroundColor = (ConsoleColor) 11;
      Console.WriteLine("\n==============================");
      Console.WriteLine("     Ghosty Bootstrapper        ");
      Console.WriteLine("==============================\n");
      Console.ResetColor();
    }

    private static void EnsureGhostyFolderExists()
    {
      if (Directory.Exists("C:\\Ghosty"))
        return;
      Directory.CreateDirectory("C:\\Ghosty");
      Console.WriteLine("[✔] Created folder: C:\\Ghosty");
    }

    private static void DownloadExecutables()
    {
      string url1 = "";
      string url2 = "";
      try
      {
        using (WebClient webClient = new WebClient())
        {
          Console.Write("[ ] Fetching update URLs from GitHub... ");
          string[] strArray = webClient.DownloadString("https://raw.githubusercontent.com/DizcatOff/GhostyLite/refs/heads/main/external").Split(new char[2]
          {
            '\r',
            '\n'
          }, (StringSplitOptions) 1);
          url1 = strArray.Length >= 2 ? strArray[0].Trim() : throw new Exception("Not enough URLs in response");
          url2 = strArray[1].Trim();
          Console.ForegroundColor = (ConsoleColor) 10;
          Console.WriteLine("✔ (2 URLs found)");
          Console.ResetColor();
        }
      }
      catch (Exception ex)
      {
        Console.ForegroundColor = (ConsoleColor) 12;
        Console.WriteLine("✘ Error: " + ex.Message);
        Console.ResetColor();
        return;
      }
      Program.CleanupOldExecutables();
      Program.DownloadFile(url1, "Ghosty.exe");
      Program.DownloadFile(url2, "GhostAdminDetect.exe");
    }

    private static void DownloadFile(string url, string fileName)
    {
      string fileName1 = Path.Combine("C:\\Ghosty", fileName);
      try
      {
        using (WebClient webClient = new WebClient())
        {
          Console.Write("[ ] Downloading " + fileName + " ");
          for (int index = 0; index < 10; ++index)
          {
            Console.Write(".");
            Thread.Sleep(200);
          }
          webClient.DownloadFile(url, fileName1);
          Console.ForegroundColor = (ConsoleColor) 10;
          Console.WriteLine("✔");
          Console.ResetColor();
        }
      }
      catch (Exception ex)
      {
        Console.ForegroundColor = (ConsoleColor) 12;
        Console.WriteLine("✘ Error: " + ex.Message);
        Console.ResetColor();
      }
    }

    private static void CleanupOldExecutables()
    {
      try
      {
        foreach (string file in Directory.GetFiles("C:\\Ghosty", "*.exe"))
          File.Delete(file);
        Console.WriteLine("[✔] Old executables removed");
      }
      catch (Exception ex)
      {
        Console.ForegroundColor = (ConsoleColor) 14;
        Console.WriteLine("[!] Cleanup warning: " + ex.Message);
        Console.ResetColor();
      }
    }

    private static void PromptAndRunExecutables()
    {
      string path1 = Path.Combine("C:\\Ghosty", "Ghosty.exe");
      string path2 = Path.Combine("C:\\Ghosty", "GhostAdminDetect.exe");
      Console.ForegroundColor = (ConsoleColor) 11;
      Console.WriteLine("\nLaunch Options:");
      Console.WriteLine("1) Ghosty");
      Console.WriteLine("2) Ghosty Admin Detector");
      Console.WriteLine("3) Both");
      Console.WriteLine("4) Exit");
      Console.ResetColor();
      Console.Write("\nYour choice (1-4): ");
      string str = Console.ReadKey(true).KeyChar.ToString();
      Console.WriteLine();
      if (!string.op_Equality(str, "1"))
      {
        if (!string.op_Equality(str, "2"))
        {
          if (!string.op_Equality(str, "3"))
          {
            if (string.op_Equality(str, "4"))
            {
              Console.WriteLine("Exiting...");
            }
            else
            {
              Console.ForegroundColor = (ConsoleColor) 12;
              Console.WriteLine("Invalid selection!");
              Console.ResetColor();
            }
          }
          else
          {
            Program.RunExecutable(path1, "Ghosty");
            Thread.Sleep(1000);
            Program.RunExecutable(path2, "Admin Detector");
          }
        }
        else
          Program.RunExecutable(path2, "Admin Detector");
      }
      else
        Program.RunExecutable(path1, "Ghosty");
    }

    private static void RunExecutable(string path, string name)
    {
      if (!File.Exists(path))
      {
        Console.ForegroundColor = (ConsoleColor) 12;
        Console.WriteLine("[✘] " + name + " not found at " + path);
        Console.ResetColor();
      }
      else
      {
        try
        {
          Console.ForegroundColor = (ConsoleColor) 14;
          Console.WriteLine("[⏳] Launching " + name + "...");
          Console.ResetColor();
          Process.Start(new ProcessStartInfo()
          {
            FileName = path,
            UseShellExecute = true
          });
          Console.ForegroundColor = (ConsoleColor) 10;
          Console.WriteLine("[✔] " + name + " launched successfully!");
          Console.ResetColor();
        }
        catch (Exception ex)
        {
          Console.ForegroundColor = (ConsoleColor) 12;
          Console.WriteLine("[✘] Error launching " + name + ": " + ex.Message);
          Console.ResetColor();
        }
      }
    }
  }
}
